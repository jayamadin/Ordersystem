// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://www.reqnroll.net/).
//      Reqnroll Version:1.0.0.0
//      Reqnroll Generator Version:1.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ArgusService.Features
{
    using Reqnroll;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "1.0.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Testing the restaurant checkout system")]
    public partial class TestingTheRestaurantCheckoutSystemFeature
    {
        
        private Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
#line 1 "Order.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureSetupAsync()
        {
            testRunner = Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(null, NUnit.Framework.TestContext.CurrentContext.WorkerId);
            Reqnroll.FeatureInfo featureInfo = new Reqnroll.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Testing the restaurant checkout system", null, ProgrammingLanguage.CSharp, featureTags);
            await testRunner.OnFeatureStartAsync(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual async System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await testRunner.OnFeatureEndAsync();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public async System.Threading.Tasks.Task TestInitializeAsync()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public async System.Threading.Tasks.Task TestTearDownAsync()
        {
            await testRunner.OnScenarioEndAsync();
        }
        
        public void ScenarioInitialize(Reqnroll.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public async System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A correct bill for a group of 4 orders is Returned correctly")]
        public async System.Threading.Tasks.Task ACorrectBillForAGroupOf4OrdersIsReturnedCorrectly()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("A correct bill for a group of 4 orders is Returned correctly", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 3
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
    await testRunner.GivenAsync("A group of 4 people place an order at 15.00", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 5
    await testRunner.AndAsync("The order contains 1 starter 1 drinks 1 main per person", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 6
    await testRunner.WhenAsync("The bill is requested", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 7
    await testRunner.ThenAsync("The correct amount of 55.4 is Returned", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A correct bill for a group of 2 placed orders made before 7pm is Returned correct" +
            "ly")]
        public async System.Threading.Tasks.Task ACorrectBillForAGroupOf2PlacedOrdersMadeBefore7PmIsReturnedCorrectly()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("A correct bill for a group of 2 placed orders made before 7pm is Returned correct" +
                    "ly", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 10
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 11
    await testRunner.GivenAsync("A group of 2 people place an order at 15.00", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 12
    await testRunner.AndAsync("The order contains 1 starter 1 drinks 1 main per person", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 13
    await testRunner.AndAsync("The bill is requested", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 14
    await testRunner.AndAsync("The correct amount of 27.7 is Returned", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 15
    await testRunner.WhenAsync("A group of 2 people place an order at 20.00", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 16
    await testRunner.AndAsync("The order contains 0 starter 1 drinks 1 main per person", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 17
    await testRunner.AndAsync("The bill is requested", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 18
    await testRunner.ThenAsync("The correct amount of 48.1 is Returned", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("A correcrt bill is calculated after an order is removed")]
        public async System.Threading.Tasks.Task ACorrecrtBillIsCalculatedAfterAnOrderIsRemoved()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            Reqnroll.ScenarioInfo scenarioInfo = new Reqnroll.ScenarioInfo("A correcrt bill is calculated after an order is removed", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 22
  this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 23
    await testRunner.GivenAsync("A group of 4 people place an order at 15.00", ((string)(null)), ((Reqnroll.Table)(null)), "Given ");
#line hidden
#line 24
    await testRunner.AndAsync("The order contains 1 starter 1 drinks 1 main per person", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 25
    await testRunner.AndAsync("The bill is requested", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 26
    await testRunner.AndAsync("The correct amount of 55.4 is Returned", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 27
    await testRunner.WhenAsync("An order is removed from the bill", ((string)(null)), ((Reqnroll.Table)(null)), "When ");
#line hidden
#line 28
    await testRunner.AndAsync("The bill is requested", ((string)(null)), ((Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
    await testRunner.ThenAsync("The correct amount of 41.6 is Returned", ((string)(null)), ((Reqnroll.Table)(null)), "Then ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
    }
}
#pragma warning restore
#endregion
